name: Deploy to GitHub Pages

# 触发新的部署
on:
  push:
    branches: [main]
  workflow_dispatch:

# 添加权限配置
permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
      NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
      NEXTAUTH_URL: https://luckysonyu99.github.io
      NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
      NODE_ENV: production
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: npm
          
      - name: Check environment variables
        run: |
          echo "Checking environment variables..."
          if [ -z "$NEXT_PUBLIC_SUPABASE_URL" ]; then
            echo "Error: NEXT_PUBLIC_SUPABASE_URL is not set"
            exit 1
          fi
          if [ -z "$NEXT_PUBLIC_SUPABASE_ANON_KEY" ]; then
            echo "Error: NEXT_PUBLIC_SUPABASE_ANON_KEY is not set"
            exit 1
          fi
          if [ -z "$NEXTAUTH_SECRET" ]; then
            echo "Error: NEXTAUTH_SECRET is not set"
            exit 1
          fi
          echo "All required environment variables are set"
          
      - name: Install dependencies
        run: |
          echo "Cleaning up previous installations..."
          rm -rf node_modules package-lock.json pnpm-lock.yaml
          npm cache clean --force
          
          echo "Installing dependencies..."
          npm install --legacy-peer-deps
          
          echo "Installing Tailwind and related packages..."
          npm install -D tailwindcss@3.3.0 postcss@8.4.31 autoprefixer@10.4.14 --legacy-peer-deps
          npm install daisyui@5.0.9 --legacy-peer-deps
          
          echo "Verifying installations..."
          echo "Node version: $(node -v)"
          echo "NPM version: $(npm -v)"
          
          echo "Installed packages:"
          npm list tailwindcss postcss autoprefixer daisyui
          
          echo "Creating next.config.js..."
          cat > next.config.js << 'EOL'
          /** @type {import('next').NextConfig} */
          const nextConfig = {
            output: 'export',
            images: {
              unoptimized: true,
            },
            basePath: process.env.NODE_ENV === 'production' ? '/luckysonyu99.github.io' : '',
          }
          
          module.exports = nextConfig
          EOL

      - name: Setup Tailwind
        run: |
          echo "Creating postcss.config.js..."
          cat > postcss.config.js << 'EOL'
          module.exports = {
            plugins: {
              'tailwindcss': {},
              'autoprefixer': {},
            },
          }
          EOL

          echo "Creating tailwind.config.js..."
          cat > tailwind.config.js << 'EOL'
          /** @type {import('tailwindcss').Config} */
          module.exports = {
            content: [
              "./app/**/*.{js,ts,jsx,tsx,mdx}",
              "./components/**/*.{js,ts,jsx,tsx,mdx}",
            ],
            theme: {
              extend: {
                fontFamily: {
                  kuaile: ['var(--font-kuaile)'],
                  qingke: ['var(--font-qingke)'],
                },
                colors: {
                  'candy-pink': '#FF69B4',
                  'candy-blue': '#87CEEB',
                  'candy-yellow': '#FFD700',
                  'candy-green': '#98FB98',
                  'candy-purple': '#DDA0DD',
                },
              },
            },
            plugins: [require("daisyui")],
          }
          EOL

      - name: Setup project structure
        run: |
          mkdir -p app/lib
          
          echo "Creating app/lib/supabase.ts..."
          cat > app/lib/supabase.ts << 'EOL'
          import { createClient } from '@supabase/supabase-js';

          if (!process.env.NEXT_PUBLIC_SUPABASE_URL) {
            throw new Error('Missing environment variable: NEXT_PUBLIC_SUPABASE_URL');
          }

          if (!process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY) {
            throw new Error('Missing environment variable: NEXT_PUBLIC_SUPABASE_ANON_KEY');
          }

          export const supabase = createClient(
            process.env.NEXT_PUBLIC_SUPABASE_URL,
            process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
          );
          EOL

          echo "Creating app/lib/milestoneService.ts..."
          cat > app/lib/milestoneService.ts << 'EOL'
          import { supabase } from './supabase';

          export interface Milestone {
            id: string;
            title: string;
            description: string;
            date: string;
            category: '成长' | '学习' | '生活' | '有趣' | '其他';
            emoji: string;
            created_at?: string;
          }

          const getMilestones = async (): Promise<Milestone[]> => {
            const { data, error } = await supabase
              .from('milestones')
              .select('*')
              .order('date', { ascending: false });

            if (error) {
              console.error('Error fetching milestones:', error);
              throw error;
            }

            return data || [];
          };

          const createMilestone = async (milestone: Omit<Milestone, 'id' | 'created_at'>): Promise<Milestone> => {
            const { data, error } = await supabase
              .from('milestones')
              .insert([milestone])
              .select()
              .single();

            if (error) {
              console.error('Error creating milestone:', error);
              throw error;
            }

            return data;
          };

          const updateMilestone = async (id: string, milestone: Partial<Milestone>): Promise<Milestone> => {
            const { data, error } = await supabase
              .from('milestones')
              .update(milestone)
              .eq('id', id)
              .select()
              .single();

            if (error) {
              console.error('Error updating milestone:', error);
              throw error;
            }

            return data;
          };

          const deleteMilestone = async (id: string): Promise<void> => {
            const { error } = await supabase
              .from('milestones')
              .delete()
              .eq('id', id);

            if (error) {
              console.error('Error deleting milestone:', error);
              throw error;
            }
          };

          export const milestoneService = {
            getMilestones,
            createMilestone,
            updateMilestone,
            deleteMilestone
          };
          EOL

      - name: Update tsconfig.json
        run: |
          echo "Updating tsconfig.json..."
          cat > tsconfig.json << 'EOL'
          {
            "compilerOptions": {
              "target": "es5",
              "lib": ["dom", "dom.iterable", "esnext"],
              "allowJs": true,
              "skipLibCheck": true,
              "strict": true,
              "forceConsistentCasingInFileNames": true,
              "noEmit": true,
              "esModuleInterop": true,
              "module": "esnext",
              "moduleResolution": "bundler",
              "resolveJsonModule": true,
              "isolatedModules": true,
              "jsx": "preserve",
              "incremental": true,
              "plugins": [
                {
                  "name": "next"
                }
              ],
              "paths": {
                "@/*": ["./app/*"]
              },
              "baseUrl": "."
            },
            "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
            "exclude": ["node_modules"]
          }
          EOL

      - name: Check configuration files
        run: |
          echo "Checking configuration files..."
          for file in tsconfig.json postcss.config.js tailwind.config.js; do
            if [ -f "$file" ]; then
              echo "$file exists"
              echo "Content of $file:"
              cat "$file"
            else
              echo "Error: $file does not exist"
              exit 1
            fi
          done

      - name: Build
        run: |
          echo "Starting build..."
          echo "NEXT_PUBLIC_SUPABASE_URL length: ${#NEXT_PUBLIC_SUPABASE_URL}"
          echo "NEXT_PUBLIC_SUPABASE_ANON_KEY length: ${#NEXT_PUBLIC_SUPABASE_ANON_KEY}"
          echo "Node modules contents:"
          ls -la node_modules
          echo "Project structure:"
          tree -L 3
          npm run build
          echo "Build completed"
        
      - name: Debug build output
        if: always()
        run: |
          echo "Listing build directory contents:"
          ls -la
          echo "Listing .next directory contents:"
          ls -la .next || echo "No .next directory"
          echo "Listing out directory contents:"
          ls -la out || echo "No out directory"
          echo "Node version:"
          node -v
          echo "NPM version:"
          npm -v
          echo "Package versions:"
          npm list tailwindcss postcss autoprefixer daisyui

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./out

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4 